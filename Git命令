1.SVN与Git的区别
SVN集中式版本控制系统，有一个中央服务器(存储历史版本)，断网无法工作。
Git分布式版本控制系统，每台主机上都有存储历史版本，断网也可工作，为了同步，依然还是有一个中央服务器。分支也比SVN强大。
工作区：working tree	暂存区：index/stage	git仓库：repository
2.git init;	创建工作目录，再执行该命令初始化git仓库，目录下有个.git
3.git add <file>;	将文件加入暂存区
4.git commit -m "备注";	将文件提交到本地仓库
5.git diff <file>;	比较该工作区文件与本地仓库当前版本(也叫HEAD)里的该文件的区别
	git diff;	工作区和暂存区的差别
	git diff --cached;	暂存区与git仓库的差别
	git diff HEAD;	工作区与git仓库的差别
6.git status;	查看仓库的状态(哪些被修改过了，没有add/commit)
7.git log;	查看版本仓库历史记录(本版本之前的，A->B->C，回滚到B只能看到A)
8.git reset --hard <commitId>;	回到某一版本，HEAD表示当前版本，版本号=commitId，写前几位能标识唯一即可
	git reset HEAD <file>;	将暂存区的内容回退到工作目录中。
	git reset HEAD;	暂存区的目录树会被git仓库HEAD指向的目录树替换，工作区不受影响
9.git reflog;	查看版本历史记录信息(ABC版本都可看到)
10.git checkout .; 或 git checkout -- <file>;	将暂存区全部或指定的文件替换本地的文件
	git checkout HEAD .; 或 git checkout HEAD <file>;	工作区和暂存区的目录树将被git仓库HEAD指向的目录树替换/覆盖
	
11.场景案例(覆盖本地修改)：
	1)本地修改未提交暂存区：git checkout -- <file>;
	2)本地修改已提交暂存区：
		git reset HEAD <file>;
		git checkout -- <file>;
	3)本地修改已提交git本地仓库：
		git reset --hard <file>;
12.git rm --cached <file>;	将文件从暂存区删除，工作区不作任何改变
13.git clone <remoteReposetory> [<directory>];	克隆远程存在的仓库[指定的目录]
14.设置git配置信息(提交的用户和密码)
	git config -e;	修改当前仓库的配置信息
	git config -e --global;	修改全局仓库的配置信息
	git config user.name [--global] "USERNAME";	也可以命令修改配置信息
	git config --list;或 cat config;	查看配置信息



